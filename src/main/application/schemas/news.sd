schema news {
    document news {
        field news_id type string {
            indexing: summary | attribute
            attribute: fast-search
        }
        field category type string {
            indexing: summary | attribute
        }
        field subcategory type string {
            indexing: summary | attribute
        }
        field title type string {
            indexing: summary | index
            index: enable-bm25
        }
        field abstract type string {
            indexing: index | summary
            index: enable-bm25
        }
        field body type string {
            indexing: index | summary
            index: enable-bm25
        }
        field url type string {
            indexing: index | summary
        }
        field date type int {
            indexing: summary | attribute
            attribute: fast-search
        }
        field clicks type int {
            indexing: summary | attribute
        }
        field impressions type int {
            indexing: summary | attribute
        }
        field embedding type tensor<float>(d0[50]) {
            # indexing: attribute 
            # attribute {
            #     distance-metric: dotproduct
            # }
            indexing: attribute | index
            attribute {
                distance-metric: euclidean
            }

        }
        field category_ctr_ref type reference<category_ctr> {
            indexing: attribute
        }
        field category_tensor type tensor<float>(category{}) {
            indexing: attribute
        }
    }
    import field category_ctr_ref.ctrs as global_category_ctrs {}

    fieldset default {
        fields: title, abstract, body
    }


    rank-profile popularity inherits default {
        function popularity() {
            expression: if (attribute(impressions) > 0,attribute(clicks) / attribute(impressions),0)
        }
        first-phase {
            expression: nativeRank(title, abstract) + 10 * popularity
        } 
    }

    rank-profile recommendation inherits default {
        first-phase {
            expression: closeness(field, embedding)
        }
    }
    rank-profile recommendation_with_global_category_ctr inherits default {
        function category_ctr() {
            expression: sum(attribute(category_tensor) * attribute(global_category_ctrs))
        }
        function nearestNeighbour() {
            expression: closeness(field, embedding)
        }
        first-phase {
            expression: nearestNeighbour * category_ctr
        }
        summary-features {
            attribute(category_tensor)
            attribute(global_category_ctrs)
            category_ctr
            nearestNeighbour
            firstPhase
        }
    }
}